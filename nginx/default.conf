server {
    listen 80;
    server_name fitopia.fr.to;
    server_tokens off;

    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    listen 443 ssl;
    server_name fitopia.fr.to;
    server_tokens off;
    http2 on;

    ssl_certificate /etc/nginx/certs/fitopia.fr.to.crt;
    ssl_certificate_key /etc/nginx/certs/fitopia.fr.to.key;

    # Recommended SSL settings
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers on;
    
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # HSTS (only enable if you understand implications)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    client_max_body_size 8k;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    location /api {
        # Proxy API requests
        try_files $uri @proxy_api;
    }

    location @proxy_api {
        # Proxy headers
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Url-Scheme $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        # Backend server address
        proxy_pass http://backend:8000;
    }

    location /django_static/ {
        # Serve Django static files
        autoindex on;
        alias /app/backend/server/django_static/;
    }

    # Additional security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), fullscreen=(self)" always;
}
